type Configs = record {
  max_primary_supply : nat64;
  secondary_token_id : principal;
  initial_primary_mint : nat64;
  max_primary_phase : nat64;
  primary_token_id : principal;
  swap_canister_id : principal;
  frontend_canister_id : principal;
  initial_secondary_burn : nat64;
};
type ExecutionError = variant {
  Underflow : record { operation : text; details : text };
  DivisionFailed : record { operation : text; details : text };
  MultiplicationOverflow : record { operation : text; details : text };
  AdditionOverflow : record { operation : text; details : text };
  CanisterCallFailed : record {
    method : text;
    canister : text;
    details : text;
  };
  MaxMintPrimaryReached : record { reason : text };
  MintFailed : record {
    token : text;
    details : text;
    amount : nat64;
    reason : text;
  };
  NoMorePrimaryCanbeMinted : record { reason : text };
  MaxPrimaryPerTrnxReached : record { reason : text };
};
type InitArgs = record {
  max_primary_supply : nat64;
  secondary_token_id : opt principal;
  initial_primary_mint : nat64;
  max_primary_phase : nat64;
  primary_token_id : opt principal;
  swap_canister_id : opt principal;
  frontend_canister_id : opt principal;
  initial_secondary_burn : nat64;
};
type Logs = record { log : text; time : nat64 };
type PaginatedTokenLogs = record {
  page_size : nat64;
  logs : vec TokenLogs;
  total_pages : nat64;
  current_page : nat64;
};
type Result = variant { Ok : nat64; Err : text };
type Result_1 = variant { Ok : text; Err : ExecutionError };
type Result_2 = variant { Ok : text; Err : text };
type TokenLogType = variant {
  Error : record { error : ExecutionError };
  Info : record { detail : text };
};
type TokenLogs = record {
  function : text;
  log_type : TokenLogType;
  log_id : nat64;
  timestamp : nat64;
  caller : principal;
};
type TokenomicsSchedule = record {
  secondary_burn_thresholds : vec nat64;
  primary_mint_per_threshold : vec nat64;
};
service : (opt InitArgs) -> {
  fetch_total_minted_primary : () -> (Result);
  get_config : () -> (Configs) query;
  get_current_primary_rate : () -> (nat64) query;
  get_current_secondary_threshold : () -> (nat64) query;
  get_current_threshold_index : () -> (nat32) query;
  get_logs : () -> (vec Logs) query;
  get_max_stats : () -> (nat64, nat64) query;
  get_token_logs : (opt nat64, opt nat64) -> (PaginatedTokenLogs) query;
  get_tokenomics_schdeule : () -> (TokenomicsSchedule) query;
  get_tokenomics_schedule : () -> (TokenomicsSchedule) query;
  get_total_secondary_burn : () -> (nat64) query;
  mint_primary : (nat64, principal, opt blob) -> (Result_1);
  your_principal : () -> (Result_2) query;
}
